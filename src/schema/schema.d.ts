/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/hello": {
    get: operations["AppController_getHello"];
  };
  "/user": {
    get: operations["UserController_getUser"];
  };
  "/user/upload/avatar": {
    post: operations["UserController_uploadAvatar"];
  };
  "/tutor-profile": {
    get: operations["TutorProfileController_tutorProfiles"];
    put: operations["TutorProfileController_updateTutorProfile"];
    post: operations["TutorProfileController_createTutorProfile"];
  };
  "/learner-profile": {
    put: operations["LearnerProfileController_updateLearnerProfile"];
    post: operations["LearnerProfileController_createLearnerProfile"];
  };
  "/auth/login": {
    post: operations["AuthController_login"];
  };
  "/auth/sign-up": {
    post: operations["AuthController_signUp"];
  };
  "/auth/refreshToken": {
    post: operations["AuthController_refreshAccessToken"];
  };
  "/auth/logOut": {
    post: operations["AuthController_logout"];
  };
  "/auth/me": {
    get: operations["AuthController_me"];
  };
  "/auth/verify-email/{id}": {
    put: operations["AuthController_verifyEmail"];
  };
  "/auth/forgot-password": {
    put: operations["AuthController_forgotPassword"];
  };
  "/auth/change-password": {
    put: operations["AuthController_changePassword"];
  };
  "/job-connection": {
    get: operations["JobConnectionController_jobConnections"];
    post: operations["JobConnectionController_createJobConnection"];
  };
  "/job-connection/accept": {
    put: operations["JobConnectionController_acceptJobConnection"];
  };
  "/job-connection/decline": {
    put: operations["JobConnectionController_declineJobConnection"];
  };
  "/notification": {
    get: operations["NotificationController_getManyNotifications"];
  };
  "/chat": {
    get: operations["ChatController_chats"];
    post: operations["ChatController_createChat"];
  };
  "/job": {
    get: operations["JobController_jobs"];
    post: operations["JobController_createJob"];
  };
  "/subject": {
    get: operations["SubjectController_subjects"];
    post: operations["SubjectController_createSubject"];
  };
  "/work-experience": {
    put: operations["WorkExperienceController_updateWorkExperience"];
    post: operations["WorkExperienceController_createWorkExperience"];
  };
  "/work-experience/{id}": {
    delete: operations["WorkExperienceController_deleteWorkExperience"];
  };
  "/education": {
    put: operations["EducationController_updateEducation"];
    post: operations["EducationController_createEducation"];
  };
  "/education/{id}": {
    delete: operations["EducationController_deleteEducation"];
  };
  "/rating": {
    put: operations["RatingController_updateRating"];
    post: operations["RatingController_createRating"];
    delete: operations["RatingController_deleteRating"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    CreateTutorProfileInput: Record<string, never>;
    LearnerProfileEntity: {
      id: string;
      bio: string;
      userId: string;
      user: components["schemas"]["UserEntity"];
    };
    TutorProfileEntity: {
      userId: string;
      id: string;
      bio: string;
      user?: components["schemas"]["UserEntity"];
    };
    UserEntity: {
      id: string;
      username: string;
      email: string;
      isVerified: boolean;
      avatar: string;
      learnerProfile: components["schemas"]["LearnerProfileEntity"];
      tutorProfile: components["schemas"]["TutorProfileEntity"];
      createdAt: number;
      updatedAt: number;
    };
    ErrorResponse: {
      statusCode: number;
      message: string;
      error: string;
    };
    UpdateTutorProfileInput: Record<string, never>;
    PageInfoType: {
      hasNextPage: boolean;
      cursor: string | number;
      lastTake: number;
      totalAmount: number;
    };
    Paginated: {
      pageInfo: components["schemas"]["PageInfoType"];
    };
    CreateLearnerProfileInput: {
      bio: string;
    };
    UpdateLearnerProfileInput: {
      bio?: string;
    };
    LoginInput: {
      email: string;
      password: string;
    };
    LoginResponse: {
      access_token: string;
      user: components["schemas"]["UserEntity"];
    };
    SignUpInput: {
      username: string;
      email: string;
      password: string;
    };
    RefreshTokenResponse: {
      accessToken: string;
    };
    ChangePasswordInput: {
      token: string;
      password: string;
    };
    /** @enum {string} */
    JobConnectionType: "TUTOR_TO_JOB" | "JOB_TO_TUTOR";
    CreateJobConnectInput: {
      jobId: string;
      tutorUserId: string;
      tutorId: string;
      learnerUserId: string;
      type: components["schemas"]["JobConnectionType"];
    };
    /** @enum {string} */
    ConnectionStatus: "REQUESTED" | "ACCEPTED" | "DECLINED";
    JobConnectionEntity: {
      jobId: string;
      tutorId: string;
      status: components["schemas"]["ConnectionStatus"];
      type: components["schemas"]["JobConnectionType"];
      createdAt: number;
    };
    AcceptJobConnectionInput: Record<string, never>;
    DeclineJobConnectionInput: Record<string, never>;
    /** @enum {string} */
    NotificationType: "TUTOR_REQUEST" | "TUTOR_ACCEPT" | "TUTOR_DECLINE" | "LEARNER_REQUEST" | "LEARNER_ACCEPT" | "LEARNER_DECLINE";
    NotificationEntity: {
      id: string;
      notificationType: components["schemas"]["NotificationType"];
      notifier?: components["schemas"]["UserEntity"];
      notifierId: string;
      receiverId: string;
      itemId: string;
      isRead: boolean;
      createdAt: number;
    };
    GetManyNotificationsInput: Record<string, never>;
    CreateChatInput: Record<string, never>;
    GetChatsInput: Record<string, never>;
    CreateJobInput: Record<string, never>;
    SubjectEntity: {
      id: string;
      name: string;
      description: string;
    };
    /** @enum {string} */
    JobType: "QA" | "TUTOR";
    /** @enum {string} */
    JobMethod: "ONLINE" | "OFFLINE" | "BOTH";
    /** @enum {string} */
    JobStatus: "OPEN" | "EMPLOYED" | "DONE";
    JobEntity: {
      id: string;
      learner: components["schemas"]["LearnerProfileEntity"];
      learnerId: string;
      subjectId: string;
      subject: components["schemas"]["SubjectEntity"];
      title: string;
      description: string;
      /** Format: int64 */
      fee: number;
      numberOfSessions: number;
      createdAt: number;
      updatedAt: number;
      jobType: components["schemas"]["JobType"];
      jobMethod: components["schemas"]["JobMethod"];
      jobStatus: components["schemas"]["JobStatus"];
    };
    /** @enum {string} */
    SortBy: "asc" | "desc";
    CreateSubjectInput: {
      name: string;
      description?: string;
    };
    CreateWorkExperienceInput: Record<string, never>;
    WorkExperienceEntity: {
      description: string;
      userId: string;
      id: string;
      position: string;
      workplace: string;
      workplaceUrl: string;
      fromDate: number;
      toDate: number;
    };
    UpdateWorkExperienceInput: Record<string, never>;
    CreateEducationInput: {
      position: string;
      workplace: string;
      workplaceUrl?: string;
      description?: string;
      educationEntity: string;
      educationEntityUrl?: string;
      fromDate: number;
      toDate: number;
    };
    EducationEntity: {
      userId: string;
      id: string;
      educationEntity: string;
      educationEntityUrl: string;
      fromDate: number;
      toDate: number;
      description: string;
    };
    UpdateEducationInput: {
      id: string;
      educationEntity: string;
      educationEntityUrl?: string;
      fromDate: number;
      toDate: number;
      description?: string;
    };
    CreateRatingInput: Record<string, never>;
    UpdateRatingInput: Record<string, never>;
    DeleteRatingInput: Record<string, never>;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  AppController_getHello: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  UserController_getUser: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  UserController_uploadAvatar: {
    responses: {
      201: {
        content: never;
      };
    };
  };
  TutorProfileController_tutorProfiles: {
    parameters: {
      query: {
        searchString: string;
        stringCursor?: string;
        take: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Paginated"] & {
            nodes?: components["schemas"]["TutorProfileEntity"][];
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  TutorProfileController_updateTutorProfile: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTutorProfileInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TutorProfileEntity"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  TutorProfileController_createTutorProfile: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTutorProfileInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["TutorProfileEntity"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  LearnerProfileController_updateLearnerProfile: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateLearnerProfileInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LearnerProfileEntity"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  LearnerProfileController_createLearnerProfile: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateLearnerProfileInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LearnerProfileEntity"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  AuthController_login: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["LoginResponse"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  AuthController_signUp: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserEntity"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  AuthController_refreshAccessToken: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["RefreshTokenResponse"];
        };
      };
    };
  };
  AuthController_logout: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  AuthController_me: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserEntity"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  AuthController_verifyEmail: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["UserEntity"];
        };
      };
    };
  };
  AuthController_forgotPassword: {
    requestBody: {
      content: {
        "application/json": string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": boolean;
        };
      };
    };
  };
  AuthController_changePassword: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordInput"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  JobConnectionController_jobConnections: {
    parameters: {
      query: {
        tutorId?: string;
        jobId?: string;
        type?: components["schemas"]["JobConnectionType"];
        status?: components["schemas"]["ConnectionStatus"];
        take: number;
        stringCursor?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Paginated"] & {
            nodes?: components["schemas"]["JobConnectionEntity"][];
          };
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  JobConnectionController_createJobConnection: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateJobConnectInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["JobConnectionEntity"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  JobConnectionController_acceptJobConnection: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcceptJobConnectionInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["JobConnectionEntity"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  JobConnectionController_declineJobConnection: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeclineJobConnectionInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["JobConnectionEntity"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  NotificationController_getManyNotifications: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetManyNotificationsInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Paginated"] & {
            nodes?: components["schemas"]["NotificationEntity"][];
          };
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  ChatController_chats: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetChatsInput"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  ChatController_createChat: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateChatInput"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  JobController_jobs: {
    parameters: {
      query: {
        take: number;
        stringCursor?: string;
        searchString: string;
        fee?: number;
        jobType?: components["schemas"]["JobType"];
        jobMethod?: components["schemas"]["JobMethod"];
        sortBy: components["schemas"]["SortBy"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Paginated"] & {
            nodes?: components["schemas"]["JobEntity"][];
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  JobController_createJob: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateJobInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["JobEntity"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  SubjectController_subjects: {
    parameters: {
      query: {
        take: number;
        stringCursor?: string;
        searchString: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Paginated"] & {
            nodes?: components["schemas"]["SubjectEntity"][];
          };
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  SubjectController_createSubject: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSubjectInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["SubjectEntity"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["SubjectEntity"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  WorkExperienceController_updateWorkExperience: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateWorkExperienceInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WorkExperienceEntity"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  WorkExperienceController_createWorkExperience: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWorkExperienceInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WorkExperienceEntity"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  WorkExperienceController_deleteWorkExperience: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["WorkExperienceEntity"];
        };
      };
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  EducationController_updateEducation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateEducationInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EducationEntity"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  EducationController_createEducation: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEducationInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EducationEntity"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  EducationController_deleteEducation: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["EducationEntity"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  RatingController_updateRating: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRatingInput"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  RatingController_createRating: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRatingInput"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  RatingController_deleteRating: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteRatingInput"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
}
